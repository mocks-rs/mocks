# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "mocks-rs"
repo = "mocks"

[changelog]
# Template for the changelog header.
header = """
# Changelog

"""

# Template for the changelog body.
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}

"""

# Remove the leading and trailing whitespace from the template.
trim = true

# Changelog footer.
footer = """
<!-- generated by git-cliff -->
"""

postprocessors = []
output = "CHANGELOG.md"

[git]
# Parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# Filter out the commits that are not conventional.
filter_unconventional = true
# Process each line of a commit as an individual commit.
split_commits = false
# Regex for preprocessing the commit messages.
commit_preprocessors = []
# Regex for parsing and grouping commits.
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^docs\\(deps\\)", group = "Dependencies (docs)", skip = true },
    { message = "^docs", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactoring", skip = true },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^ci", group = "CI/CD", skip = true },
    { message = "^chore\\(changelog\\)", group = "Changelog", skip = true },
    { message = "^chore", group = "Miscellaneous Tasks", skip = true },
    { body = ".*security", group = "Security" },
    { message = "^revert", group = "Revert" },
    { message = "^cargo\\(deps\\)", group = "Dependencies" },
    { message = "^github-actions", group = "GitHub Actions", skip = true },
    { message = "^version", group = "Version", skip = true },
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser.
protect_breaking_commits = false
# Filter out the commits that are not matched by commit parsers.
filter_commits = false
# Regex for matching git tags
tag_pattern = "^[0-9]+\\.[0-9]+\\.[0-9]+.*$"

# Regex for skipping tags.
skip_tags = "1.0.0|^0.*"
# Regex for ignoring tags.
ignore_tags = ""
# Sort the tags topologically.
topo_order = false
# Sort the commits inside sections by oldest/newest order.
sort_commits = "newest"
# Limit the number of commits included in the changelog.
# limit_commits = 42
