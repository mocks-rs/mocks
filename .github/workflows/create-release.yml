name: Create Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  test-and-lint:
    uses: ./.github/workflows/test-and-lint.yml

  create-release:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get current version
      id: get_version
      run: |
        CURRENT_VERSION=$(grep "^version = " Cargo.toml | cut -d'"' -f2)
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Setup Node.js for version sync
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Synchronize versions
      run: |
        node scripts/sync-versions.js sync

    - name: Check if version changed
      id: check_version
      run: |
        CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
        
        # Get the previous version from the last commit that changed Cargo.toml
        PREVIOUS_VERSION=$(git log --oneline -n 2 --pretty=format:"%H" -- Cargo.toml | tail -1 | xargs git show --format="" --name-only | head -1 | xargs git show | grep "^version = " | cut -d'"' -f2 || echo "0.0.0")
        
        echo "Previous version: $PREVIOUS_VERSION"
        echo "Current version: $CURRENT_VERSION"
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "Version unchanged: $CURRENT_VERSION"
        fi

    - name: Commit synchronized versions
      if: steps.check_version.outputs.version_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add npm-dist/*/package.json
          git commit -m "Sync package.json versions to v${{ steps.get_version.outputs.version }}"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check if tag exists
      id: check_tag
      if: steps.check_version.outputs.version_changed == 'true'
      run: |
        TAG="v${{ steps.get_version.outputs.version }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Tag $TAG already exists"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "Tag $TAG does not exist"
        fi

    - name: Create Git tag
      if: steps.check_version.outputs.version_changed == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      run: |
        TAG="v${{ steps.get_version.outputs.version }}"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      if: steps.check_version.outputs.version_changed == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: v${{ steps.get_version.outputs.version }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}