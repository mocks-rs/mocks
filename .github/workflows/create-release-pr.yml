name: Create Release PR

on:
  push:
    branches: [main]
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:

concurrency:
  group: release-pr-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      should_release: ${{ steps.check_version.outputs.version_changed == 'true' && steps.check_tag.outputs.tag_exists == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep "^version = " Cargo.toml | cut -d'"' -f2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Check if version changed
        id: check_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          PREVIOUS_VERSION=$(git show HEAD~1:Cargo.toml | grep "^version = " | cut -d'"' -f2 2>/dev/null || echo "")

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ -n "$CURRENT_VERSION" ] && [ -n "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

      - name: Setup Node.js for version sync check
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify version consistency
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          echo "Checking version consistency across package files"
          node scripts/sync-versions.js check

      - name: Check if tag exists
        id: check_tag
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          TAG="${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG does not exist, proceeding with release"
          fi

  test-and-lint:
    if: needs.version-check.outputs.version_changed == 'true'
    needs: version-check
    uses: ./.github/workflows/test-and-lint.yml

  update-changelog:
    if: needs.version-check.outputs.should_release == 'true'
    needs: [version-check, test-and-lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'main'

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create changelog update branch
        run: |
          BRANCH_NAME="chore/changelog-update-v${{ needs.version-check.outputs.version }}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose --tag ${{ needs.version-check.outputs.version }}
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Commit and create PR
        run: |
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to CHANGELOG.md"
          else
            git commit -m "chore(changelog): Update changelog for v${{ needs.version-check.outputs.version }}"
            git push origin "$BRANCH_NAME"

            gh pr create \
              --title "Update changelog for v${{ needs.version-check.outputs.version }}" \
              --body "Automated changelog update for version ${{ needs.version-check.outputs.version }}" \
              --base main \
              --head "$BRANCH_NAME"

            echo "Changelog update PR created successfully"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
