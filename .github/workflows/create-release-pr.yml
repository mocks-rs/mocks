name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # Check if version is valid format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Version must be in format x.y.z (e.g., 1.2.3)"
            exit 1
          fi

          echo "Version format is valid: $VERSION"

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if release branch already exists
        run: |
          BRANCH_NAME="release/v${{ github.event.inputs.version }}"
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Error: Release branch $BRANCH_NAME already exists"
            exit 1
          fi

      - name: Create and checkout release branch
        run: |
          BRANCH_NAME="release/v${{ github.event.inputs.version }}"
          git checkout -b "$BRANCH_NAME"

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: ''

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Update Cargo.toml version
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # Update version in Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

          # Verify the change
          if ! grep -q "^version = \"$VERSION\"" Cargo.toml; then
            echo "Error: Failed to update version in Cargo.toml"
            exit 1
          fi

          echo "Updated Cargo.toml version to $VERSION"

      - name: Test and build
        run: |
          cargo test
          cargo build --release

      - name: Sync versions across package.json files
        run: node scripts/sync-versions.js sync

      - name: Update CHANGELOG.md
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose --tag ${{ github.event.inputs.version }}
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Commit changes
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # Add all modified files
          git add Cargo.toml Cargo.lock packages/@mocks-rs/*/package.json CHANGELOG.md

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 1
          fi

          # Commit changes
          git commit -m "version: $VERSION"

      - name: Push branch
        run: |
          BRANCH_NAME="release/v${{ github.event.inputs.version }}"
          git push origin "$BRANCH_NAME"

      - name: Generate token for mocks-rs
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.RELEASE_PR_CREATOR_APP_ID }}
          private-key: ${{ secrets.RELEASE_PR_CREATOR_PRIVATE_KEY }}

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH_NAME="release/v$VERSION"

          # Create PR with owners team as reviewers
          gh pr create \
            --head "$BRANCH_NAME" \
            --base "main" \
            --reviewer "mocks-rs/owners" \
            --title "Release v$VERSION" \
            --body "# Release version $VERSION

            This PR was automatically created to prepare for the v$VERSION release.

            ## Changes
            - Updated version to $VERSION in Cargo.toml
            - Synchronized package.json versions
            - Updated CHANGELOG.md (if applicable)

            ## Review Checklist
            - [ ] Version numbers are correct across all files
            - [ ] CHANGELOG.md is updated appropriately
            - [ ] Build passes successfully
            - [ ] All tests pass

            <!-- generated by create-release-pr.yml -->"

          # Verify PR creation
          if [ $? -eq 0 ]; then
            echo "Successfully created PR for release v$VERSION"
          else
            echo "Failed to create PR"
            exit 1
          fi
