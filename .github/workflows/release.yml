name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      should_release: ${{ steps.check_version.outputs.version_changed == 'true' && steps.check_tag.outputs.tag_exists == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep "^version = " Cargo.toml | cut -d'"' -f2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Check if version changed
        id: check_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          PREVIOUS_VERSION=$(git show HEAD~1:Cargo.toml | grep "^version = " | cut -d'"' -f2 2>/dev/null || echo "")

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ -n "$CURRENT_VERSION" ] && [ -n "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

      - name: Setup Node.js for version sync check
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify version consistency
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          echo "Checking version consistency across package files"
          node scripts/sync-versions.js check

      - name: Check CHANGELOG.md entry
        id: check_changelog
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          
          # Check if CHANGELOG.md contains the version entry
          if grep -q "^## \[${CURRENT_VERSION}\]" CHANGELOG.md; then
            echo "changelog_entry_exists=true" >> $GITHUB_OUTPUT
            echo "CHANGELOG.md contains entry for version $CURRENT_VERSION"
          else
            echo "changelog_entry_exists=false" >> $GITHUB_OUTPUT
            echo "CHANGELOG.md does not contain entry for version $CURRENT_VERSION"
            echo "Please run 'git-cliff --tag $CURRENT_VERSION' to update CHANGELOG.md"
            exit 1
          fi

      - name: Check if tag exists
        id: check_tag
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          TAG="${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG does not exist, proceeding with release"
          fi

  test-and-lint:
    if: needs.version-check.outputs.should_release == 'true'
    needs: version-check
    uses: ./.github/workflows/test-and-lint.yml

  create-release:
    if: needs.version-check.outputs.should_release == 'true'
    needs: [version-check, test-and-lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes from changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose --unreleased --tag ${{ needs.version-check.outputs.version }} --output ${{ env.OUTPUT }}
        env:
          OUTPUT: release-notes.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version-check.outputs.version }}
          name: ${{ needs.version-check.outputs.version }}
          body_path: release-notes.md
          generate_release_notes: false
          draft: false  
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish-cargo:
    if: needs.version-check.outputs.should_release == 'true'
    needs: [version-check, create-release]
    uses: ./.github/workflows/publish-to-cratesio.yml
    with:
      dry_run: false
    secrets: inherit

  publish-npm:
    if: needs.version-check.outputs.should_release == 'true'
    needs: [version-check, create-release]
    uses: ./.github/workflows/publish-to-npm.yml
    with:
      dry_run: false
    secrets: inherit

  build-binaries:
    if: needs.version-check.outputs.should_release == 'true'
    needs: [version-check, create-release]
    uses: ./.github/workflows/build-release-binaries.yml
    with:
      version: ${{ needs.version-check.outputs.version }}
    secrets: inherit

  complete-release:
    if: needs.version-check.outputs.should_release == 'true'
    needs: [version-check, publish-cargo, publish-npm, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Release completion summary
        run: |
          echo "Release v${{ needs.version-check.outputs.version }} completed successfully!"
          echo "Published to:"
          echo "  - crates.io"
          echo "  - npm registry"  
          echo "  - GitHub releases (with binaries)"
