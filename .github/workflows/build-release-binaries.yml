name: Build release binaries

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux-x64
            archive_ext: tar.gz
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux-arm64
            archive_ext: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            platform: darwin-x64
            archive_ext: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            platform: darwin-arm64
            archive_ext: tar.gz
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            platform: win32-x64
            archive_ext: zip
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            platform: win32-arm64
            archive_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag or input
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Extract version from tag (remove 'v' prefix if present)
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG_NAME#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Install musl toolchain
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            # Install aarch64 cross-compilation tools
            sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          fi

      - name: Install Windows cross-compilation tools
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Build binary
        timeout-minutes: 30
        run: cargo build --release --target ${{ matrix.target }} --bin mocks
        env:
          CARGO_TERM_COLOR: always
          RUST_BACKTRACE: 1
          # aarch64 cross-compilation linker
          CC_aarch64_unknown_linux_musl: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc

      - name: Verify binary
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == win32-* ]]; then
            BINARY_PATH="target/${{ matrix.target }}/release/mocks.exe"
          else
            BINARY_PATH="target/${{ matrix.target }}/release/mocks"
          fi
          
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Binary not found at $BINARY_PATH"
            exit 1
          fi
          
          ls -la "$BINARY_PATH"
          file "$BINARY_PATH" || true

      - name: Create archive
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          if [[ "${{ matrix.platform }}" == win32-* ]]; then
            BINARY_NAME="mocks.exe"
            ARCHIVE_NAME="mocks-${VERSION}-${{ matrix.target }}.zip"
          else
            BINARY_NAME="mocks"
            ARCHIVE_NAME="mocks-${VERSION}-${{ matrix.target }}.tar.gz"
          fi
          
          BINARY_PATH="target/${{ matrix.target }}/release/${BINARY_NAME}"
          
          # Create temporary directory for archive contents
          mkdir -p archive
          cp "$BINARY_PATH" archive/
          
          # Create archive
          if [ "${{ matrix.archive_ext }}" = "zip" ]; then
            cd archive && zip -r "../$ARCHIVE_NAME" . && cd ..
          else
            tar -czf "$ARCHIVE_NAME" -C archive .
          fi
          
          # Calculate SHA256 hash
          if command -v sha256sum > /dev/null; then
            sha256sum "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
          elif command -v shasum > /dev/null; then
            shasum -a 256 "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
          else
            echo "No SHA256 utility found"
            exit 1
          fi
          
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "hash_file=${ARCHIVE_NAME}.sha256" >> $GITHUB_OUTPUT
          
          # Display results
          ls -la "$ARCHIVE_NAME"*
          cat "${ARCHIVE_NAME}.sha256"
        id: create_archive

      - name: Upload archive to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          files: |
            ${{ steps.create_archive.outputs.archive_name }}
            ${{ steps.create_archive.outputs.hash_file }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
