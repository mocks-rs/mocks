name: Publish to NPM

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
            platform: linux-x64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-20.04
            platform: linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            platform: darwin-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            platform: darwin-arm64
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            platform: win32-x64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            platform: win32-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from release or input
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Install system dependencies
        run: |
          echo "::group::Installing system dependencies for ${{ matrix.target }}"
          set -x
          sudo apt-get update
          # Install musl toolchain
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            echo "Installing musl toolchain..."
            sudo apt-get install -y musl-tools
            if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
              echo "Installing aarch64 cross-compilation tools..."
              sudo apt-get install -y gcc-aarch64-linux-gnu
            fi
          fi
          # Install Windows cross-compilation tools
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            echo "Installing Windows cross-compilation tools..."
            sudo apt-get install -y gcc-mingw-w64-x86-64
          fi
          echo "::endgroup::"

      - name: Verify Rust installation
        run: |
          echo "::group::Rust environment information"
          rustc --version
          cargo --version
          rustup show
          echo "Available targets:"
          rustup target list --installed
          echo "::endgroup::"

      - name: Build binary
        run: |
          echo "::group::Building binary for ${{ matrix.target }}"
          set -x
          echo "Starting build at $(date)"
          cargo build --release --target ${{ matrix.target }} --verbose
          echo "Build completed at $(date)"
          echo "::endgroup::"
        env:
          RUSTFLAGS: "-C strip=symbols -C codegen-units=1"
          CARGO_TERM_COLOR: always
          # Set linker for aarch64-musl
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc

      - name: Verify binary
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "win32-x64" ] || [ "${{ matrix.platform }}" = "win32-arm64" ]; then
            BINARY_PATH="target/${{ matrix.target }}/release/mocks.exe"
          else
            BINARY_PATH="target/${{ matrix.target }}/release/mocks"
          fi
          
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Binary not found at $BINARY_PATH"
            exit 1
          fi
          
          ls -la "$BINARY_PATH"

      - name: Prepare platform package
        shell: bash
        run: |
          echo "::group::Preparing platform package for ${{ matrix.platform }}"
          mkdir -p dist/${{ matrix.platform }}
          
          # Check if packages directory exists
          if [ ! -d "packages/mocks-${{ matrix.platform }}" ]; then
            echo "packages/mocks-${{ matrix.platform }} directory not found"
            exit 1
          fi
          
          cp -r packages/mocks-${{ matrix.platform }}/* dist/${{ matrix.platform }}/
          
          # Copy the binary to the platform package
          if [ "${{ matrix.platform }}" = "win32-x64" ] || [ "${{ matrix.platform }}" = "win32-arm64" ]; then
            cp target/${{ matrix.target }}/release/mocks.exe dist/${{ matrix.platform }}/
          else
            cp target/${{ matrix.target }}/release/mocks dist/${{ matrix.platform }}/
          fi
          
          echo "Package contents:"
          ls -la dist/${{ matrix.platform }}/
          echo "::endgroup::"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'dist/${{ matrix.platform }}/package.json'

      - name: Dry run publish platform package
        if: github.event.inputs.dry_run == 'true'
        shell: bash
        run: |
          echo "::group::Dry run publishing platform package ${{ matrix.platform }}"
          cd dist/${{ matrix.platform }}
          npm publish --access public --dry-run
          echo "::endgroup::"

      - name: Publish platform package
        if: github.event.inputs.dry_run == 'false' || github.event_name == 'release'
        shell: bash
        run: |
          echo "::group::Publishing platform package ${{ matrix.platform }}"
          cd dist/${{ matrix.platform }}
          npm publish --access public
          echo "::endgroup::"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-main:
    needs: build-and-publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'packages/mocks/package.json'

      - name: Verify main package
        shell: bash
        run: |
          echo "::group::Verifying main package structure"
          if [ ! -d "packages/mocks" ]; then
            echo "packages/mocks directory not found"
            exit 1
          fi
          
          ls -la packages/mocks/
          echo "::endgroup::"

      - name: Dry run publish main package
        if: github.event.inputs.dry_run == 'true'
        shell: bash
        run: |
          echo "::group::Dry run publishing main package"
          cd packages/mocks
          npm publish --access public --dry-run
          echo "::endgroup::"

      - name: Publish main package
        if: github.event.inputs.dry_run == 'false' || github.event_name == 'release'
        shell: bash
        run: |
          echo "::group::Publishing main package"
          cd packages/mocks
          npm publish --access public
          echo "::endgroup::"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
